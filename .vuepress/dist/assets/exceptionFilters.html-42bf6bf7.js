import{_ as n,o as s,c as a,d as t}from"./app-a9a991a6.js";const e={},o=t(`<h1 id="ðŸ“”-exception-filters" tabindex="-1"><a class="header-anchor" href="#ðŸ“”-exception-filters" aria-hidden="true">#</a> ðŸ“” Exception Filters</h1><h1 id="_1-tushunchalar" tabindex="-1"><a class="header-anchor" href="#_1-tushunchalar" aria-hidden="true">#</a> 1 - Tushunchalar</h1><p>NestJS-dagi &quot;Exception Filters&quot; xususiyatlari, sizning ilovangizda kelib chiqadigan xatoliklarni boshqarishda yordam beradi. Ular, sizning serveringizning qanday xatolik javoblarini qaytarishini boshqarishingizga imkon beradi.</p><p>Exception filterlar asosan ikkita komponentdan iborat: decorator va class.</p><p>Decorator sizning controller metodlariga yoki butun controllerga ilova qilinadi. Uning vazifasi shundaki, agar ushbu metod yoki controllerda xatolik bo&#39;lsa, kerakli filter classni chaqirish.</p><p>Class esa xatolikni qanday qilib qaytarishni aniqlaydi. U filterni yozish uchun, <code>@Catch()</code> decoratorini va <code>ExceptionFilter</code> interfeysini ishlatishingiz kerak.</p><p>Quyidagi misolni ko&#39;rib chiqing:</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Catch<span class="token punctuation">,</span> ExceptionFilter<span class="token punctuation">,</span> ArgumentsHost<span class="token punctuation">,</span> HttpException <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

@<span class="token function">Catch</span><span class="token punctuation">(</span>HttpException<span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HttpExceptionFilter</span> <span class="token keyword">implements</span> <span class="token class-name">ExceptionFilter</span> <span class="token punctuation">{</span>
  <span class="token function">catch</span><span class="token punctuation">(</span>exception<span class="token operator">:</span> HttpException<span class="token punctuation">,</span> host<span class="token operator">:</span> ArgumentsHost<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ctx <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">switchToHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> request <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> status <span class="token operator">=</span> exception<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    response
      <span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        statusCode<span class="token operator">:</span> status<span class="token punctuation">,</span>
        timestamp<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        path<span class="token operator">:</span> request<span class="token punctuation">.</span>url<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bu filter <code>HttpException</code> turlarini tutib oladi va ularni JSON formatidagi xatolik javobiga aylantiradi. Bu javobda xatolik kod, vaqt belgisi va so&#39;rovning URL manzili bor.</p><p>Filterni ilovalash uchun, metod yoki controllerga <code>@UseFilters()</code> decoratorini qo&#39;shing:</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> UseFilters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

@<span class="token function">UseFilters</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpExceptionFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SomeController</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bu holatda, <code>SomeController</code> controlleridagi hamma metodlar <code>HttpExceptionFilter</code> filterdan o&#39;tadi.</p><p>Bundan tashqari, siz global exception filterlarni ham qo&#39;shishingiz mumkin, bu esa barcha controllerlarni qamrab oladi.</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ApplicationModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
  app<span class="token punctuation">.</span><span class="token function">useGlobalFilters</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpExceptionFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bu usulda, sizning barcha controllerlaringiz <code>HttpExceptionFilter</code> orqali xatoliklarni qaytaradi.</p><h1 id="_2-tushunchalar" tabindex="-1"><a class="header-anchor" href="#_2-tushunchalar" aria-hidden="true">#</a> 2 - Tushunchalar</h1><p>Exception Filtersni qo&#39;llashning yana bir yo&#39;li ham bor. Bu, har bir controller metodiga mos exception filterni biriktirish.</p><p>Quyidagi misolni ko&#39;rib chiqing:</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> UseFilters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HttpExceptionFilter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./http-exception.filter&#39;</span><span class="token punctuation">;</span>

@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">BooksController</span> <span class="token punctuation">{</span>
  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  @<span class="token function">UseFilters</span><span class="token punctuation">(</span>HttpExceptionFilter<span class="token punctuation">)</span>
  <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span><span class="token string">&#39;Forbidden&#39;</span><span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bu yerda, <code>findAll()</code> metodida xatolik yuz berishi holida, <code>HttpExceptionFilter</code> ishga tushadi.</p><p>Agar sizning ilovangizda bir nechta turdagi xatoliklar ro&#39;yxatdan o&#39;tishi mumkin bo&#39;lsa, siz <code>@Catch()</code> decoratoriga bir nechta xatolik turlarini uzatishingiz mumkin. Misol uchun:</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Catch<span class="token punctuation">,</span> ArgumentsHost <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BaseExceptionFilter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> QueryFailedError <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;typeorm&#39;</span><span class="token punctuation">;</span>

@<span class="token function">Catch</span><span class="token punctuation">(</span>QueryFailedError<span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseExceptionFilter</span> <span class="token keyword">extends</span> <span class="token class-name">BaseExceptionFilter</span> <span class="token punctuation">{</span>
  <span class="token function">catch</span><span class="token punctuation">(</span>exception<span class="token operator">:</span> QueryFailedError<span class="token punctuation">,</span> host<span class="token operator">:</span> ArgumentsHost<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InternalServerErrorException</span><span class="token punctuation">(</span><span class="token string">&#39;Database Error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bu yerda, <code>DatabaseExceptionFilter</code> <code>QueryFailedError</code> turdagi xatoliklarni tutib oladi. Bu xatoliklar, TypeORM bilan ishlash paytida ro&#39;yxatdan o&#39;tishi mumkin bo&#39;lgan xatoliklar.</p><p>Bu filter sizning ilovangizning ma&#39;lumotlar bazasiga oid xatoliklarni yo&#39;qotib, foydalanuvchiga tushunarliroq xabar beradi. Bu xatoliklar odatda ma&#39;lumotlar bazasining ichki xatoliklari bo&#39;lib, ularga oid xabarlar foydalanuvchilar uchun tushunarli bo&#39;lmaydi. Shuning uchun, bu yerda biz ularga &quot;Database Error&quot; degan umumiy xabar beramiz.</p><p>Bu filterni ilovalash uchun, yuqoridagi misoldagi kabi <code>@UseFilters()</code> decoratoridan foydalanishingiz mumkin. Yoki global exception filter sifatida ilovalashingiz mumkin:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>async function bootstrap() {
  const app = await NestFactory.create(ApplicationModule);
  app.useGlobalFilters(new DatabaseExceptionFilter());
  await app.listen(3000);
}
bootstrap();

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bu usulda, sizning barcha controllerlaringiz <code>DatabaseExceptionFilter</code> orqali xatoliklarni qaytaradi. Bu, sizning ilovangizning ma&#39;lumotlar bazasiga oid xatoliklarni yaxshi boshqarishingizga yordam beradi.</p><h1 id="_3-hayotiy-misol" tabindex="-1"><a class="header-anchor" href="#_3-hayotiy-misol" aria-hidden="true">#</a> 3 - Hayotiy misol</h1><p>Exception Filters yordamida siz ilovangizda ro&#39;yxatdan o&#39;tadigan xatoliklarni boshqarishingiz mumkin. Aytaylik, sizning ilovangizda bir nechta xatolik turlari mavjud: HTTP xatoliklar (masalan, 404 Not Found, 403 Forbidden), ma&#39;lumotlar bazasining xatoliklari, va sizning ilovangizning ichki xatoliklari.</p><p>Bu xatoliklarni boshqarish uchun siz quyidagi exception filterlarni yozishingiz mumkin:</p><ol><li><code>HttpExceptionFilter</code>: bu filter HTTP xatoliklarini qaytaradi.</li><li><code>DatabaseExceptionFilter</code>: bu filter ma&#39;lumotlar bazasining xatoliklarini qaytaradi.</li><li><code>AppExceptionFilter</code>: bu filter sizning ilovangizning ichki xatoliklarini qaytaradi.</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Catch<span class="token punctuation">,</span> ExceptionFilter<span class="token punctuation">,</span> ArgumentsHost<span class="token punctuation">,</span> HttpException <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

@<span class="token function">Catch</span><span class="token punctuation">(</span>HttpException<span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HttpExceptionFilter</span> <span class="token keyword">implements</span> <span class="token class-name">ExceptionFilter</span> <span class="token punctuation">{</span>
  <span class="token function">catch</span><span class="token punctuation">(</span>exception<span class="token operator">:</span> HttpException<span class="token punctuation">,</span> host<span class="token operator">:</span> ArgumentsHost<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ctx <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">switchToHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> request <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> status <span class="token operator">=</span> exception<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    response
      <span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        statusCode<span class="token operator">:</span> status<span class="token punctuation">,</span>
        timestamp<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        path<span class="token operator">:</span> request<span class="token punctuation">.</span>url<span class="token punctuation">,</span>
        message<span class="token operator">:</span> exception<span class="token punctuation">.</span>message<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

@<span class="token function">Catch</span><span class="token punctuation">(</span>DatabaseException<span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseExceptionFilter</span> <span class="token keyword">implements</span> <span class="token class-name">ExceptionFilter</span> <span class="token punctuation">{</span>
  <span class="token function">catch</span><span class="token punctuation">(</span>exception<span class="token operator">:</span> DatabaseException<span class="token punctuation">,</span> host<span class="token operator">:</span> ArgumentsHost<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Database exceptions handling logic here</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

@<span class="token function">Catch</span><span class="token punctuation">(</span>AppException<span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppExceptionFilter</span> <span class="token keyword">implements</span> <span class="token class-name">ExceptionFilter</span> <span class="token punctuation">{</span>
  <span class="token function">catch</span><span class="token punctuation">(</span>exception<span class="token operator">:</span> AppException<span class="token punctuation">,</span> host<span class="token operator">:</span> ArgumentsHost<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// App exceptions handling logic here</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Endi siz ushbu filterlarni ilovalashingiz kerak. Masalan, siz <code>BooksController</code> controllerida <code>getAllBooks()</code> metodini yozmoqchisiz. Bu metod barcha kitoblarni qaytarishi kerak, lekin agar ma&#39;lumotlar bazasida xatolik bo&#39;lsa, <code>DatabaseExceptionFilter</code> ishga tushishi kerak.</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> UseFilters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BooksService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./books.service&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DatabaseExceptionFilter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./database-exception.filter&#39;</span><span class="token punctuation">;</span>

@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">BooksController</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> booksService<span class="token operator">:</span> BooksService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  @<span class="token function">UseFilters</span><span class="token punctuation">(</span>DatabaseExceptionFilter<span class="token punctuation">)</span>
  <span class="token function">getAllBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>booksService<span class="token punctuation">.</span><span class="token function">getAllBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bu yerda, <code>getAllBooks()</code> metodida <code>DatabaseExceptionFilter</code> ishlatiladi. Bu metod ma&#39;lumotlar bazasida xatolik yuz berishi holida, <code>DatabaseExceptionFilter</code> ishga tushadi va xatolik javobini qaytaradi.</p><p>Bu misol yordamida siz NestJS-dagi Exception Filters xususiyatini qanday qo&#39;llash kerakligini ko&#39;rgan bo&#39;lsangiz. Exception Filters sizning ilovangizda yuz beradigan xatoliklarni boshqarishda juda yordam beradi.</p>`,36),p=[o];function i(c,l){return s(),a("div",null,p)}const r=n(e,[["render",i],["__file","exceptionFilters.html.vue"]]);export{r as default};
