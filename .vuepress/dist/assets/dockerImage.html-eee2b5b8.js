import{_ as a,o as i,c as n,d as r}from"./app-a9a991a6.js";const e={},o=r(`<h1 id="docker-image" tabindex="-1"><a class="header-anchor" href="#docker-image" aria-hidden="true">#</a> Docker image</h1><h2 id="docker-image-nima" tabindex="-1"><a class="header-anchor" href="#docker-image-nima" aria-hidden="true">#</a> Docker image nima</h2><p>Docker image, Docker konteynerlarini yaratish uchun asosiy qurilmalardan biridir. Bu, bir dastur va uning barcha zarur fayllarini, kutubxonalarni, tizim sozlamalarini va operatsion tizimini o&#39;z ichiga olgan bir paketlashgan to&#39;plam hisoblanadi.</p><p>Docker image, bitta asosiy dastur yoki tizimning hammasini o&#39;z ichiga oladi. Misol uchun, Linux operatsion tizimi, Python dasturlash tili va kerakli kutubxonalarni o&#39;z ichiga olgan image yaratish mumkin. Image yaratish jarayoni Dockerfile nomli fayl orqali amalga oshiriladi. Dockerfile da dasturning muhitini sozlash, kerakli paketlarni yuklash, fayllarni ko&#39;chirish va boshqa sozlamalarni bajarish uchun komandalar beriladi.</p><p>Docker image, muhiti ifodalaydi, ammo ishga tushirilmagan holatda o&#39;zgarishlarga yo&#39;l qo&#39;ymaydi. Birinchi qadamda Docker image yaratiladi va keyin ushbu image asosida bir yoki bir nechta Docker konteynerlari yaratiladi. Har bir konteyner o&#39;zining o&#39;ziga xos ishlatish uchun o&#39;z nusxasini olishadi.</p><p>Docker image-ning afzalliklari quyidagilardan iborat:</p><ol><li><p>Portabilitet: Docker image, dastur va muhitni o&#39;z ichiga olgan paketlashgan to&#39;plam sifatida o&#39;zgarisiz va portativdir. Uning portativligi sababli image-ni bir tizimdan boshqasiga osonlik bilan ko&#39;chirish va ulardan foydalanish mumkin.</p></li><li><p>Isolatsiya: Har bir Docker konteyneri o&#39;zining o&#39;ziga xos image-ni asosida ishlaydi, shuning uchun ulardan foydalanish bilan tizimning boshqa qismlari ta&#39;sir etmaydi. Bu isolatsiya va xavfsizlikni ta&#39;minlaydi.</p></li><li><p>Tijoratlar ustidan tejamkorlik: Docker image-ni yaratish va tarqatish tezroq va oson bo&#39;ladi. Image-ni qayta ishga tushirish, yangilash va tarqatishning tejamkor usullari mavjud.</p></li><li><p>Layered struktura: Docker image, ichida bir nechta qatlar (layer)dan iborat bo&#39;lgan layered struktura bilan yaratiladi. Bu qatlar, har bir amalning o&#39;zining o&#39;ziga xos ma&#39;lumotlardan iborat bo&#39;lib, bir necha image-ni biriktirish imkonini beradi. Bu layered struktura disk ishlab chiqarish va tizim resurslarini samarali foydalanishni ta&#39;minlaydi.</p></li></ol><p>Docker image, dasturlash</p><p>va tizim boshqaruvini soddalashtiradi va avtomatlashtiradi. Uning yordamida bir xil image asosida o&#39;zgaruvchan tizimlarni tez va ishonchli tarzda yaratish, o&#39;rnatish va boshqarish mumkin.</p><h2 id="docker-image-boshqaruvi" tabindex="-1"><a class="header-anchor" href="#docker-image-boshqaruvi" aria-hidden="true">#</a> Docker image boshqaruvi</h2><p>Docker image boshqaruvi, Docker platformasi yordamida yaratilgan Docker image-larni boshqarish va ulardan foydalanishning samarali usulini ta&#39;minlayan qurilmadirlar. Bu boshqaruvi Docker CLI va boshqa qo&#39;llanmalarga asoslangan vositalar orqali amalga oshiriladi.</p><p>Quyidagilarni Docker image boshqaruvi bilan amalga oshirish mumkin:</p><ol><li><p>Docker CLI: Docker image-larni boshqarishning asosiy usuli Docker CLI komandalari orqali amalga oshiriladi. <code>docker build</code>, <code>docker pull</code>, <code>docker push</code>, <code>docker tag</code> kabi komandalarni ishlatish orqali image-larni yaratish, yuklash, saqlash va nomlarni o&#39;zgartirish mumkin.</p></li><li><p>Docker Registry: Docker image-larini saqlash uchun ishlatiladigan registrlar mavjud. Rasmiy Docker Hub registry-si, boshqa umumiy registry-lar yoki o&#39;zining xususiy registry-sini o&#39;rnatish orqali image-lar ko&#39;chiriladi va o&#39;zgartiriladi.</p></li><li><p>Docker Compose: Docker Compose, biror bir proyektning o&#39;z ichidagi ko&#39;p konteynerli muhiti tavsiflash uchun ishlatiladi. Bu, bir boshqaruvi fayli yordamida bir qator konteynerlarni birlashtiradi va boshqarishga imkon beradi.</p></li><li><p>Orqaga qaytish (Rollback): Docker image boshqaruvi orqali, bir avvalgi versiyaga o&#39;zgarishlar qilish va hattoki xatolarni tuzatish osonligi mavjud. Bu, image-ni muharrirlik qilish, bir versiyani o&#39;chirish yoki avvalgi holatiga qaytarish imkonini beradi.</p></li><li><p>Image sozlamalari: Docker image-larni boshqaruvi, image sozlamalarini o&#39;zgartirishga imkon beradi. Misol uchun, konteyner uchun portni aniqlash, muhit o&#39;zgaruvchanlarini sozlash va boshqa tarkibiy sozlamalarni o&#39;zgartirish mumkin.</p></li><li><p>Multistage Build: Docker image boshqaruvi orqali, bir nechta jarayonni o&#39;z ichiga olgan &quot;multistage build&quot; jarayonlarini amalga oshirish mumkin. Bu, bitta Dockerfile-da bir nechta langlarni yaratish va ulardan foydalanish imkonini beradi. Bu usul orqali o&#39;zgaruvchanligi kamaytiriladi va image o&#39;lchamini kichraytirish mumkin.</p></li></ol><p>Bu faqat bir nechta umumiy Docker image boshqaruvi vositalardan bir qancha misollar. Docker ekosistemasida boshqa boshqaruv vositalari mavjud bo&#39;lib, ulardan foydalanish orqali image-larni tashqi vazifalarni bajarish va boshqarish imkoniyati kengayadi.</p><h2 id="docker-image-qurish" tabindex="-1"><a class="header-anchor" href="#docker-image-qurish" aria-hidden="true">#</a> Docker image qurish</h2><p>Docker image-ni qurish uchun quyidagi qadamlarni izohlashim mumkin:</p><ol><li>Dockerfile yaratish: Dockerfile nomli bir matn faylini yaratish kerak. Bu fayl Docker image-ni qanday yaratish, qanday kutubxonalarni o&#39;rnatish, sozlamalarni bajarish va boshqa muhimmu tadbirlarni amalga oshirishni aniqlaydi. Dockerfile misol bo&#39;lishi mumkin:</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># Asosiy Docker image-ni tanlash
FROM ubuntu:latest

# Kerakli paketlarni o&#39;rnatish
RUN apt-get update &amp;&amp; apt-get install -y \\
    python3 \\
    python3-pip

# Loyiha fayllarini image-ga ko&#39;chirish
COPY . /app

# Kerakli kutubxonalarni o&#39;rnatish
RUN pip3 install -r /app/requirements.txt

# Konteynerda ishga tushiriladigan asosiy buyruqlar
CMD [&quot;python3&quot;, &quot;/app/main.py&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Docker image-ni yaratish: Yaratilgan Dockerfile-ni asosida Docker image-ni yaratish uchun quyidagi komandani ishga tushiring:</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker build -t image_nomi:tag -f Dockerfile_ismi .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Bu komanda Dockerfile ni bazasida yangi image yaratadi. <code>-t</code> parametri yaratiladigan image ning nomini va versiyasini aniqlaydi, <code>-f</code> parametri Dockerfile ni aniqlaydi va <code>.</code> joriy katalogni bildiradi.</p><ol start="3"><li><p>Yaratilgan image-ni tekshirish: Image-ni yaratgandan so&#39;ng uni tekshirish uchun <code>docker images</code> komandasidan foydalanishingiz mumkin. Bu komanda mavjud barcha Docker image-larni ro&#39;yxatini chiqaradi.</p></li><li><p>Yaratilgan image-ni ishlatish: Yaratilgan image-ni konteyner yaratish uchun <code>docker run</code> komandasidan foydalanishingiz mumkin. Misol uchun:</p></li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -d --name container_nomi image_nomi:tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Bu komanda <code>-d</code> parametri orqali konteynerning asosiy jarayonini fonde ishga tushiradi va <code>--name</code> parametri orqali konteynerga nom beradi.</p><p>Bu qadamga asosan yuqoridagi jarayonlarni amalga oshirishingiz mumkin va o&#39;zingizning maqsadingizga mos Docker image-ni yarata olasiz.</p><h2 id="portlar-bilan-ishlash" tabindex="-1"><a class="header-anchor" href="#portlar-bilan-ishlash" aria-hidden="true">#</a> Portlar bilan ishlash</h2><p>Docker konteynerlari va localhost (tizimning o&#39;zi) orasida portlar bilan bog&#39;lash uchun quyidagi qadamlarni izohlashingiz mumkin:</p><ol><li>Docker konteyneriga portlar ta&#39;minlash: Dockerfile yoki Docker Compose faylida, konteyner yaratilganda murojaat qilingan portlarni aniqlashingiz kerak. Misol uchun, <code>Dockerfile</code> da konteyner uchun 8080 portini ochish quyidagicha ifodalangan bo&#39;lishi mumkin:</li></ol><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>Docker konteynerini portlar bilan ishga tushirish: Konteyner yaratilgandan so&#39;ng, Docker run komandasi orqali portlar bilan bog&#39;lashni aniqlashingiz kerak. Misol uchun, konteyner uchun 8080 portini 8080 porti bilan bog&#39;lash quyidagicha komanda bilan amalga oshiriladi:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 image_nomi:tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Bu komanda <code>-p</code> parametri orqali hostning 8080 portini konteynerning 8080 portiga yo&#39;naltiradi.</p><ol start="3"><li>Bog&#39;langan portlarni localhost (tizimning o&#39;zi) orqali ishlatish: Bog&#39;langan portlarni localhost (tizimning o&#39;zi) orqali ishlatish uchun quyidagi URL-ni ishlatishingiz mumkin:</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://localhost:8080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Bu URL-ni brauzeringizda ochib, bog&#39;langan konteynerning 8080 portiga murojaat qilasiz.</p><p>Agar konteyner portini boshqa portga bog&#39;lashni istasangiz, <code>-p</code> parametrini o&#39;zgartirishingiz mumkin. Masalan, hostning 8888 portini konteynerning 8080 portiga bog&#39;lash uchun quyidagi komanda bilan ishlatishingiz mumkin:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8080 image_nomi:tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Bu komandaga murojaat qilish uchun URL quyidagicha bo&#39;ladi:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://localhost:8888
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Bu usul orqali Docker konteynerlari orqali ishlayotgan dasturlarni localhost orqali test qilishingiz va ularga murojaat qilishingiz mumkin.</p>`,40),l=[o];function s(t,d){return i(),n("div",null,l)}const m=a(e,[["render",s],["__file","dockerImage.html.vue"]]);export{m as default};
