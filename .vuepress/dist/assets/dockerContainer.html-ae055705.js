import{_ as a,o as i,c as r,d as n}from"./app-a9a991a6.js";const o={},l=n('<h1 id="docker-container" tabindex="-1"><a class="header-anchor" href="#docker-container" aria-hidden="true">#</a> Docker Container</h1><h2 id="docker-container-nima" tabindex="-1"><a class="header-anchor" href="#docker-container-nima" aria-hidden="true">#</a> Docker Container nima</h2><p>Docker konteyneri, Docker platformasi orqali yaratilgan va boshqarilgan bir sanalizatsiya oynasi hisoblanadi. Bu, biror dasturning o&#39;z muhitini o&#39;zida o&#39;zgartirishga to&#39;g&#39;ri keladigan, isolatsiyalangan va portable xususiyatlarga ega bo&#39;lgan bir turda &quot;izolatsiyalangan&quot; o&#39;rtamni ifodalaydi.</p><p>Konteyner, dastur va uning barcha xususiyatlari, dastur ishlashi uchun zarur resurslar va kutubxonalarni o&#39;z ichiga oladi. Konteyner tizimi host operatsion tizimi va ma&#39;lumotlar bilan nisbatan aloqador bo&#39;lib, alohida tizim resurslari va isolatsiya qo&#39;shimchalari, masalan, izolatsiya korpuslari, jadval asosida ishlaydi.</p><p>Docker konteyneri, xususiyatlarini ta&#39;minlash uchun Dockerfile nomli konfiguratsiya faylidan foydalanadi. Dockerfile, dastur yaratish jarayonini ma&#39;lumotlarga asoslanadigan instruksiyalardan iborat matn faylidir. Bu instruksiyalar orqali Docker konteyneri yaratiladi, kerakli paketlar yuklanadi, dastur yuklanadi va sozlangan sozlamalar bajariladi.</p><p>Docker konteynerlarining afzalliklari quyidagilar o&#39;rtasida keltirilishi mumkin:</p><ol><li><p>Izolatsiya: Har bir Docker konteyneri alohida ishlaydi va xususiyatlarini o&#39;z ichiga oladi. Bunda bir konteynerdagi dastur va resurslar boshqa konteynerlarga ta&#39;sir etmaydi.</p></li><li><p>Portabilitet: Docker konteynerlari o&#39;zlariga xos o&#39;rtamda ishlashadi, shuning uchun ulardan foydalanishning oson va portativ usuli mavjud. Konteynerlarning yaratishida ishlatilgan Dockerfile, bir host tizimidan boshqasiga dasturlar va muhitlarni ko&#39;chirishni osonlashtiradi.</p></li><li><p>Skalabilnost: Docker orqali konteynerlarni qo&#39;shish, o&#39;chirish va boshqarish oson bo&#39;ladi. Uning ichida Docker Compose, Docker Swarm, Kubernetes kabi vositalar mavjud, bu vositalar yordamida ko&#39;p-konteynerli muhitlar yaratish va boshqarish mumkin.</p></li><li><p>Tijoratlar ustidan tejamkorlik: Docker konteynerlari tezroq ishga tushishi va o&#39;chirilishi mumkin. Konteynerlar yaratish, sozlash va yangilash uchun minimal vaqt sarflanadi.</p></li><li><p>Ekosistema: Docker katta va ommaviy yozuvlarning o&#39;z ichiga olgan ekosistemaga ega. Bunda sizning dast</p></li></ol><p>ur va tizimlaringiz uchun katta bir kutubxona mavjud.</p><p>Docker konteynerlarining foydalanishlariga misollar quyidagilardir: dasturlarni ishga tushirish, tizimlarni test qilish, mahalliy muhitdan o&#39;zgarmasligi uchun muhitlarni tashlash, tizimlar o&#39;rtasidagi muhiti boshqarish, skalalash va ko&#39;p qator boshqaruv skhemalarini bajarish.</p><p>Bu jumladan, Docker konteyneri dasturlash va tizim boshqaruvi sohasida katta o&#39;rinni egallaygan innovatsion va samarador bir vositadir.</p><h2 id="docker-container-boshqaruvi" tabindex="-1"><a class="header-anchor" href="#docker-container-boshqaruvi" aria-hidden="true">#</a> Docker container boshqaruvi</h2><p>Docker konteynerlarini boshqarish uchun bir nechta vositalar mavjud. Bu vositalardan biri Docker CLI (Command Line Interface) - Docker komandalarini ishga tushirishga yordam beruvchi komandalar ketmasligidir. Buning orqali siz konteynerlarni yaratishingiz, boshqarishingiz, bajarishingiz va o&#39;chirishingiz mumkin.</p><p>Quyidagi komandalarni Docker CLI yordamida foydalanish orqali konteynerlarni boshqarishingiz mumkin:</p><ol><li><p><code>docker run</code>: Yangi konteyner yaratish uchun ishlatiladi. Bu komanda orqali siz konteynerni boshqaruv uchun o&#39;zgartirishlar bilan bajarilishi kerak bo&#39;lgan imkoniyatlarni sozlashingiz mumkin.</p></li><li><p><code>docker start</code>: Konteynerni boshlash uchun ishlatiladi. Avvalroq yaratilgan konteynerlarni qayta ishga tushirish uchun foydalaniladi.</p></li><li><p><code>docker stop</code>: Konteyner ishini to&#39;xtatish uchun ishlatiladi. Konteynerda ishlayotgan dastur tugagandan so&#39;ng, konteynerlarni to&#39;xtatish uchun foydalaniladi.</p></li><li><p><code>docker restart</code>: Konteynerni qayta ishga tushirish uchun ishlatiladi. Bu komanda orqali konteynerlarni to&#39;xtatish va keyin qayta boshlash imkoniyatiga ega bo&#39;lasiz.</p></li><li><p><code>docker rm</code>: Konteyner o&#39;chirish uchun ishlatiladi. O&#39;chirilgan konteynerlarning barcha ma&#39;lumotlari yo&#39;qolib ketadi, shuning uchun bu komandaning ixtiyoriy foydalanishidan oldin dikkatli bo&#39;lishingiz kerak.</p></li><li><p><code>docker ps</code>: Ishga tushirilgan konteynerlarni ro&#39;yxatini ko&#39;rish uchun ishlatiladi. Bunda yangi konteynerlar, ishlamayotgan konteynerlar va davom etayotgan konteynerlar ro&#39;yxatini ko&#39;rish imkoniyati mavjud.</p></li><li><p><code>docker logs</code>: Konteynerning loglarini ko&#39;rish uchun ishlatiladi. Bu komanda orqali konteynerga oid loglarni ko&#39;rish va tekshirish imkoniyatiga ega bo&#39;lasiz.</p></li></ol><p>Bu faqat bir nechta umumiy Docker CLI komandalardan bir qancha misollar. Docker boshqaruv vositalari ko&#39;p, masalan, Docker Compose, Docker Swarm, Kubernetes va boshqalar. Ulardan foydalanish orqali konteynerlarni yaratish, boshqarish va ko&#39;p-komponentli muhitlarni tuzish imkoniyatlari mavjud.</p>',15),t=[l];function s(e,h){return i(),r("div",null,t)}const u=a(o,[["render",s],["__file","dockerContainer.html.vue"]]);export{u as default};
